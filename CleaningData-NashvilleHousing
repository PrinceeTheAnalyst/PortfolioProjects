--Cleaning Data on SQL

Select *
from Nashville_Housing 

--Standardizing Date Format

Select SaleDateConverted, CONVERT(Date,SaleDate)
from Nashville_Housing

UPDATE Nashville_Housing
SET SaleDate =  CONVERT(Date,SaleDate)

ALTER TABLE NashvilleHousing
ADD SaleDateConverted Date;

UPDATE Nashville_Housing
SET SaleDateConverted =  CONVERT(Date,SaleDate)

--Populate Property Address Data

Select *
from Nashville_Housing
where PropertyAddress is null
order by ParcelID


Select a.ParcelID, b.ParcelID, a.UniqueID , b.UniqueID 
from Nashville_Housing a
JOIN Nashville_Housing b
	ON a.ParcelID = b. ParcelID
	AND a.UniqueID  != b.UniqueID 
Where a.PropertyAddress is Null


Select a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress,b.PropertyAddress)
from Nashville_Housing a
JOIN Nashville_Housing b
	ON a.ParcelID = b. ParcelID
	AND a.UniqueID  != b.UniqueID 
Where a.PropertyAddress is Null

Update a
SET PropertyAddress = ISNULL(a.PropertyAddress,b.PropertyAddress)
from Nashville_Housing a
JOIN Nashville_Housing b
	ON a.ParcelID = b. ParcelID
	AND a.UniqueID  != b.UniqueID
Where a.PropertyAddress is Null

--Breaking out Address into Individual Columns (Address, City, State)

Select PropertyAddress
from Nashville_Housing
--where PropertyAddress is null
--order by ParcelID 

SELECT 
SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress)-1) AS Address
,SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress)+1, LEN(PropertyAddress)) AS Address

FROM Nashville_Housing

ALTER TABLE NashvilleHousing
ADD PropertSplitAddress nvarchar(255);

UPDATE Nashville_Housing
SET PropertySplitAddress =  SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress)-1)


ALTER TABLE NashvilleHousing
ADD PropertSplitCity nvarchar(255);

UPDATE Nashville_Housing
SET PropertySplitCity =  SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress)+1, LEN(PropertyAddress))

SELECT OwnerAddress
FROM Nashville_Housing


SELECT 
PARSENAME(REPLACE(OwnerAddress, ',','.'),3)
,PARSENAME(REPLACE(OwnerAddress, ',','.'),2)
,PARSENAME(REPLACE(OwnerAddress, ',','.'),1)
FROM Nashville_Housing


ALTER TABLE NashvilleHousing
ADD OwnerSplitAddress nvarchar(255);

UPDATE Nashville_Housing
SET OwnerSplitAddress = PARSENAME(REPLACE(OwnerAddress, ',','.'),3)


ALTER TABLE NashvilleHousing
ADD OwnerSplitCity nvarchar(255);

UPDATE Nashville_Housing
SET OwnerSplitCity = PARSENAME(REPLACE(OwnerAddress, ',','.'),2)

ALTER TABLE NashvilleHousing
ADD OwnerSplitState nvarchar(255);

UPDATE Nashville_Housing
SET OwnerSplitState = PARSENAME(REPLACE(OwnerAddress, ',','.'),1)

-- Change Y and N to Yes and NO in "Sold as Vacant" field

SELECT DISTINCT (SoldAsVacant), COUNT(SoldAsVacant)  
FROM Nashville_Housing
GROUP BY SoldAsVacant
ORDER BY 2

SELECT SoldAsVacant
, CASE WHEN SoldAsVacant = 'Y' THEN 'Yes'
		WHEN SoldAsVacant = 'N' THEN 'NO'
		ELSE SoldAsVacant
		END
FROM Nashville_Housing

UPDATE Nashville_Housing
SET SoldAsVacant = CASE WHEN SoldAsVacant = 'Y' THEN 'Yes'
		WHEN SoldAsVacant = 'N' THEN 'NO'
		ELSE SoldAsVacant
		END

--Removing Duplicates

WITH RowNumCTE AS (
Select *,
	ROW_NUMBER () OVER (
	PARTITION BY ParcelID,
				 PropertyAddress,
				 SalePrice,
				 SaleDate,
				 LegalReference
				 ORDER BY 
					UniqueID
					) row_num

From Nashville_Housing
--order by ParcelID 
) 
SELECT *
FROM RowNumCTE
WHERE row_num > 1
ORDER BY PropertyAddress


WITH RowNumCTE AS (
Select *,
	ROW_NUMBER () OVER (
	PARTITION BY ParcelID,
				 PropertyAddress,
				 SalePrice,
				 SaleDate,
				 LegalReference
				 ORDER BY 
					UniqueID
					) row_num

From Nashville_Housing
--order by ParcelID 
) 
DELETE
FROM RowNumCTE
WHERE row_num > 1
--ORDER BY PropertyAddress

--Deleting Unused Columns

SELECT *
FROM Nashville_Housing

ALTER TABLE Nashville_Housing
DROP COLUMN OwnerAddress, TaxDistrict, PropertyAddress

ALTER TABLE Nashville_Housing
DROP COLUMN SaleDate


ALTER TABLE Nashville_Housing
ALTER COLUMN SoldAsVacant nvarchar






sp_help Nashville_Housing;
